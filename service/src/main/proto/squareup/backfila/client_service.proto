syntax = "proto2";
package squareup.backfila.clientservice;

option java_package = "com.squareup.protos.backfila.clientservice";
option java_generic_services = true;

// In this file: APIs that backfila calls on the client service.

message KeyRange {
  optional bytes start = 2;
  optional bytes end = 3;
}

message PrepareBackfillRequest {
  optional string backfill_name = 1;

  // Range populated if specified by user in UI
  optional KeyRange range = 2;

  // User provided parameters at creation.
  map<string, bytes> parameters = 4;
}
message PrepareBackfillResponse {
  message Instance {
    optional string instance_name = 1;
    optional KeyRange backfill_range = 2;

    // If available, an estimate can be provided here to display while the
    // actual count is being computed.
    optional uint64 estimated_record_count = 3;
  }

  repeated Instance instances = 1;
}

message GetNextBatchRangeRequest {
  optional string backfill_name = 2;
  optional string instance_name = 3;
  // Max number of matching records to return in a batch range.
  optional uint64 batch_size = 4;
  // Max number of records to scan when computing a batch range.
  optional uint64 scan_size = 5;
  // End key of the previous computed batch. Can be null for the first call.
  optional bytes previous_end_key = 6;
  // The range of the whole backfill.
  // This determines where the first batch starts and the last batch ends.
  optional KeyRange backfill_range = 7;
  // User provided parameters at creation
  map<string, bytes> parameters = 8;
  // Compute as many batches as possible until this duration elapses.
  optional uint64 compute_time_limit_ms = 9;
  // Compute as many batches as possible until this many results.
  optional uint64 compute_count_limit = 10;
}
message GetNextBatchRangeResponse {
  message Batch {
    optional KeyRange batch_range = 1;
    optional uint64 scanned_record_count = 2;
    optional uint64 matching_record_count = 3;
  }

  repeated Batch batches = 1;
}

message RunBatchRequest {
  optional string backfill_name = 1;
  optional string instance_name = 2;
  optional KeyRange batch_range = 3;

  // User provided parameters at creation.
  map<string, bytes> parameters = 5;

  optional PipelinedData pipelined_data = 6;
}
message RunBatchResponse {
  // How much to sleep before starting new batches. For example can be set to replication lag.
  optional uint64 backoff_ms = 1;

  optional PipelinedData pipelined_data = 2;
}

message PipelinedData {
  repeated PipelinedRecord records = 1;

  repeated bytes metadata = 2;
}
message PipelinedRecord {
  optional bytes data = 1;
}

// TODO(mgersh): rm this if we don't need it for service container apps
service BackfilaClientService {
  rpc PrepareBackfill (PrepareBackfillRequest) returns (PrepareBackfillResponse);
  rpc GetNextBatchRange (GetNextBatchRangeRequest) returns (GetNextBatchRangeResponse);
  rpc RunBatch (RunBatchRequest) returns (RunBatchResponse);
}